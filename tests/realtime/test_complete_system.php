<?php
/**
 * Test Complete Realtime System
 * Ki·ªÉm tra to√†n b·ªô h·ªá th·ªëng th√¥ng b√°o realtime
 */

require_once '../config/config.php';
require_once '../config/database.php';
require_once '../models/InternalMessage.php';

class CompleteSystemTest {
    private $db;
    private $internalMessageModel;

    public function __construct() {
        $database = Database::getInstance();
        $this->db = $database->getConnection();
        $this->internalMessageModel = new InternalMessage();
    }

    public function runCompleteTest() {
        echo "<h1>üß™ Test Complete Realtime System</h1>";

        // 1. Ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu
        $this->testDatabase();

        // 2. Ki·ªÉm tra users
        $this->testUsers();

        // 3. T·∫°o th√¥ng b√°o test
        $this->createTestMessage();

        // 4. Ki·ªÉm tra SSE endpoint
        $this->testSSEEndpoint();

        // 5. H∆∞·ªõng d·∫´n test th·ªß c√¥ng
        $this->showManualTestInstructions();

        // 6. Debug info
        $this->showDebugInfo();
    }

    private function testDatabase() {
        echo "<h2>1. Ki·ªÉm tra Database</h2>";

        try {
            // Ki·ªÉm tra b·∫£ng internal_messages
            $stmt = $this->db->query("SELECT COUNT(*) FROM internal_messages");
            $count = $stmt->fetchColumn();
            echo "<p style='color: green;'>‚úÖ B·∫£ng internal_messages: {$count} th√¥ng b√°o</p>";

            // Ki·ªÉm tra b·∫£ng internal_message_recipients
            $stmt = $this->db->query("SELECT COUNT(*) FROM internal_message_recipients");
            $count = $stmt->fetchColumn();
            echo "<p style='color: green;'>‚úÖ B·∫£ng internal_message_recipients: {$count} b·∫£n ghi</p>";

            // Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
            $this->checkTableStructure();

        } catch (Exception $e) {
            echo "<p style='color: red;'>‚ùå L·ªói database: " . $e->getMessage() . "</p>";
        }
    }

    private function checkTableStructure() {
        echo "<h3>C·∫•u tr√∫c b·∫£ng:</h3>";

        // Ki·ªÉm tra internal_messages
        $stmt = $this->db->query("DESCRIBE internal_messages");
        $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo "<p><strong>internal_messages columns:</strong></p><ul>";
        foreach ($columns as $column) {
            echo "<li>{$column['Field']} - {$column['Type']}</li>";
        }
        echo "</ul>";

        // Ki·ªÉm tra internal_message_recipients
        $stmt = $this->db->query("DESCRIBE internal_message_recipients");
        $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo "<p><strong>internal_message_recipients columns:</strong></p><ul>";
        foreach ($columns as $column) {
            echo "<li>{$column['Field']} - {$column['Type']}</li>";
        }
        echo "</ul>";
    }

    private function testUsers() {
        echo "<h2>2. Ki·ªÉm tra Users</h2>";

        try {
            // Super Admin
            $stmt = $this->db->query("SELECT id, CONCAT(first_name, ' ', last_name) as name, role FROM users WHERE role = 'super_admin' LIMIT 3");
            $superAdmins = $stmt->fetchAll(PDO::FETCH_ASSOC);
            echo "<p><strong>Super Admins:</strong></p><ul>";
            foreach ($superAdmins as $admin) {
                echo "<li>ID: {$admin['id']} - {$admin['name']} ({$admin['role']})</li>";
            }
            echo "</ul>";

            // Admin/Manager
            $stmt = $this->db->query("SELECT id, CONCAT(first_name, ' ', last_name) as name, role FROM users WHERE role IN ('manager', 'admin') LIMIT 5");
            $admins = $stmt->fetchAll(PDO::FETCH_ASSOC);
            echo "<p><strong>Admins/Managers:</strong></p><ul>";
            foreach ($admins as $admin) {
                echo "<li>ID: {$admin['id']} - {$admin['name']} ({$admin['role']})</li>";
            }
            echo "</ul>";

        } catch (Exception $e) {
            echo "<p style='color: red;'>‚ùå L·ªói: " . $e->getMessage() . "</p>";
        }
    }

    private function createTestMessage() {
        echo "<h2>3. T·∫°o Th√¥ng B√°o Test</h2>";

        try {
            // L·∫•y Super Admin ƒë·∫ßu ti√™n
            $stmt = $this->db->prepare("SELECT id, CONCAT(first_name, ' ', last_name) as name FROM users WHERE role = 'super_admin' LIMIT 1");
            $stmt->execute();
            $superAdmin = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$superAdmin) {
                echo "<p style='color: red;'>‚ùå Kh√¥ng t√¨m th·∫•y Super Admin</p>";
                return;
            }

            // L·∫•y Admin ƒë·∫ßu ti√™n
            $stmt = $this->db->prepare("SELECT id, CONCAT(first_name, ' ', last_name) as name FROM users WHERE role = 'manager' LIMIT 1");
            $stmt->execute();
            $admin = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$admin) {
                echo "<p style='color: red;'>‚ùå Kh√¥ng t√¨m th·∫•y Admin</p>";
                return;
            }

            // T·∫°o th√¥ng b√°o test
            $messageData = [
                'title' => 'Test Realtime System - ' . date('Y-m-d H:i:s'),
                'content' => 'ƒê√¢y l√† th√¥ng b√°o test ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng realtime. Th·ªùi gian t·∫°o: ' . date('Y-m-d H:i:s') . '. N·ªôi dung n√†y s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong popup notification.',
                'message_type' => 'notification',
                'priority' => 'high',
                'sender_id' => $superAdmin['id'],
                'recipients' => [$admin['id']]
            ];

            $result = $this->internalMessageModel->createMessage($messageData);

            if ($result) {
                echo "<p style='color: green;'>‚úÖ T·∫°o th√¥ng b√°o test th√†nh c√¥ng</p>";
                echo "<p><strong>Message ID:</strong> {$result}</p>";
                echo "<p><strong>Ti√™u ƒë·ªÅ:</strong> {$messageData['title']}</p>";
                echo "<p><strong>Ng∆∞·ªùi g·ª≠i:</strong> {$superAdmin['name']} (ID: {$superAdmin['id']})</p>";
                echo "<p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {$admin['name']} (ID: {$admin['id']})</p>";
                echo "<p><strong>Lo·∫°i:</strong> {$messageData['message_type']}</p>";
                echo "<p><strong>∆Øu ti√™n:</strong> {$messageData['priority']}</p>";

                // Ki·ªÉm tra th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c t·∫°o
                $this->verifyMessageCreated($result, $admin['id']);
            } else {
                echo "<p style='color: red;'>‚ùå L·ªói t·∫°o th√¥ng b√°o test</p>";
            }

        } catch (Exception $e) {
            echo "<p style='color: red;'>‚ùå L·ªói: " . $e->getMessage() . "</p>";
        }
    }

    private function verifyMessageCreated($messageId, $recipientId) {
        echo "<h3>Ki·ªÉm tra th√¥ng b√°o ƒë√£ t·∫°o:</h3>";

        try {
            // Ki·ªÉm tra trong b·∫£ng internal_messages
            $stmt = $this->db->prepare("SELECT * FROM internal_messages WHERE id = ?");
            $stmt->execute([$messageId]);
            $message = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($message) {
                echo "<p style='color: green;'>‚úÖ Th√¥ng b√°o t·ªìn t·∫°i trong internal_messages</p>";
            } else {
                echo "<p style='color: red;'>‚ùå Th√¥ng b√°o kh√¥ng t·ªìn t·∫°i trong internal_messages</p>";
            }

            // Ki·ªÉm tra trong b·∫£ng internal_message_recipients
            $stmt = $this->db->prepare("SELECT * FROM internal_message_recipients WHERE message_id = ? AND recipient_id = ?");
            $stmt->execute([$messageId, $recipientId]);
            $recipient = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($recipient) {
                echo "<p style='color: green;'>‚úÖ Ng∆∞·ªùi nh·∫≠n ƒë√£ ƒë∆∞·ª£c th√™m v√†o internal_message_recipients</p>";
                echo "<p><strong>Is Read:</strong> " . ($recipient['is_read'] ? 'Yes' : 'No') . "</p>";
            } else {
                echo "<p style='color: red;'>‚ùå Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i trong internal_message_recipients</p>";
            }

        } catch (Exception $e) {
            echo "<p style='color: red;'>‚ùå L·ªói ki·ªÉm tra: " . $e->getMessage() . "</p>";
        }
    }

    private function testSSEEndpoint() {
        echo "<h2>4. Ki·ªÉm tra SSE Endpoint</h2>";

        $endpoints = [
            'Admin SSE' => '/admin/internal-messages/sse',
            'Super Admin SSE' => '/superadmin/internal-messages/sse'
        ];

        foreach ($endpoints as $name => $endpoint) {
            echo "<h3>{$name}</h3>";
            echo "<p><strong>URL:</strong> <code>{$endpoint}</code></p>";

            $fullUrl = SITE_URL . $endpoint;
            echo "<p><strong>Full URL:</strong> <code>{$fullUrl}</code></p>";

            // Test v·ªõi curl
            $this->testEndpointWithCurl($fullUrl, $name);
        }
    }

    private function testEndpointWithCurl($url, $name) {
        echo "<h4>Test v·ªõi cURL:</h4>";

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 5);
        curl_setopt($ch, CURLOPT_HEADER, true);
        curl_setopt($ch, CURLOPT_NOBODY, true);

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        curl_close($ch);

        if ($error) {
            echo "<p style='color: red;'>‚ùå cURL Error: {$error}</p>";
        } else {
            echo "<p style='color: green;'>‚úÖ HTTP Code: {$httpCode}</p>";

            if ($httpCode == 200) {
                echo "<p style='color: green;'>‚úÖ Endpoint ho·∫°t ƒë·ªông</p>";
            } elseif ($httpCode == 401) {
                echo "<p style='color: orange;'>‚ö†Ô∏è C·∫ßn ƒëƒÉng nh·∫≠p (ƒëi·ªÅu n√†y l√† b√¨nh th∆∞·ªùng)</p>";
            } else {
                echo "<p style='color: red;'>‚ùå Endpoint kh√¥ng ho·∫°t ƒë·ªông</p>";
            }
        }
    }

    private function showManualTestInstructions() {
        echo "<h2>5. H∆∞·ªõng D·∫´n Test Th·ªß C√¥ng</h2>";

        echo "<div style='background: #f8f9fa; padding: 20px; border-radius: 8px;'>";
        echo "<h3>üîß C√°ch Test Realtime:</h3>";
        echo "<ol>";
        echo "<li><strong>M·ªü 2 tab tr√¨nh duy·ªát</strong></li>";
        echo "<li><strong>Tab 1 - Super Admin:</strong>";
        echo "<ul>";
        echo "<li>ƒêƒÉng nh·∫≠p Super Admin: <code>" . SITE_URL . "/superadmin</code></li>";
        echo "<li>Truy c·∫≠p: <code>" . SITE_URL . "/superadmin/internal-messages/send</code></li>";
        echo "<li>G·ª≠i th√¥ng b√°o m·ªõi</li>";
        echo "</ul></li>";
        echo "<li><strong>Tab 2 - Admin:</strong>";
        echo "<ul>";
        echo "<li>ƒêƒÉng nh·∫≠p Admin: <code>" . SITE_URL . "/admin</code></li>";
        echo "<li>M·ªü Developer Tools (F12) ‚Üí Console</li>";
        echo "<li>Xem c√≥ log 'SSE Connected' kh√¥ng</li>";
        echo "<li>G·ª≠i th√¥ng b√°o t·ª´ Tab 1 v√† xem c√≥ popup kh√¥ng</li>";
        echo "</ul></li>";
        echo "</ol>";

        echo "<h3>üêõ Debug SSE:</h3>";
        echo "<p>M·ªü Console trong Developer Tools v√† xem c√°c log:</p>";
        echo "<ul>";
        echo "<li><code>SSE Connected</code> - K·∫øt n·ªëi th√†nh c√¥ng</li>";
        echo "<li><code>SSE Error</code> - L·ªói k·∫øt n·ªëi</li>";
        echo "<li><code>Error parsing SSE message</code> - L·ªói parse d·ªØ li·ªáu</li>";
        echo "<li><code>Error updating unread count</code> - L·ªói c·∫≠p nh·∫≠t s·ªë th√¥ng b√°o</li>";
        echo "</ul>";

        echo "<h3>üîç Ki·ªÉm Tra Network:</h3>";
        echo "<p>Trong Developer Tools ‚Üí Network tab:</p>";
        echo "<ul>";
        echo "<li>T√¨m request ƒë·∫øn <code>/admin/internal-messages/sse</code></li>";
        echo "<li>Ki·ªÉm tra Response c√≥ d·∫°ng <code>data: {...}</code> kh√¥ng</li>";
        echo "<li>Ki·ªÉm tra Status Code c√≥ ph·∫£i 200 kh√¥ng</li>";
        echo "</ul>";

        echo "<h3>üìù Test File:</h3>";
        echo "<p>S·ª≠ d·ª•ng file test: <code>" . SITE_URL . "/tests/realtime/simple_sse_test.html</code></p>";
        echo "</div>";
    }

    private function showDebugInfo() {
        echo "<h2>6. Debug Info</h2>";

        echo "<div style='background: #e9ecef; padding: 15px; border-radius: 8px;'>";
        echo "<h3>üìä Th√¥ng tin h·ªá th·ªëng:</h3>";
        echo "<p><strong>PHP Version:</strong> " . phpversion() . "</p>";
        echo "<p><strong>Server:</strong> " . $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown' . "</p>";
        echo "<p><strong>Site URL:</strong> " . SITE_URL . "</p>";
        echo "<p><strong>Current Time:</strong> " . date('Y-m-d H:i:s') . "</p>";

        // Ki·ªÉm tra logs
        $logFile = '../logs/application.log';
        if (file_exists($logFile)) {
            $logSize = filesize($logFile);
            echo "<p><strong>Log File Size:</strong> " . number_format($logSize) . " bytes</p>";
        }

        echo "<h3>üîß C√°c file quan tr·ªçng:</h3>";
        $files = [
            'realtime-notifications.js' => '../assets/js/realtime-notifications.js',
            'InternalMessageController.php' => '../controllers/InternalMessageController.php',
            'InternalMessage.php' => '../models/InternalMessage.php',
            'Admin Header' => '../views/admin/layouts/header.php',
            'SuperAdmin Header' => '../views/layouts/superadmin_header.php'
        ];

        foreach ($files as $name => $path) {
            if (file_exists($path)) {
                $size = filesize($path);
                echo "<p style='color: green;'>‚úÖ {$name}: " . number_format($size) . " bytes</p>";
            } else {
                echo "<p style='color: red;'>‚ùå {$name}: Kh√¥ng t·ªìn t·∫°i</p>";
            }
        }
        echo "</div>";
    }
}

// Ch·∫°y test
$test = new CompleteSystemTest();
$test->runCompleteTest();
?>
