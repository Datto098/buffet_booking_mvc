<?php
/**
 * Test Realtime Notifications
 * Ki·ªÉm tra ch·ª©c nƒÉng SSE v√† th√¥ng b√°o realtime
 */

require_once '../config/config.php';
require_once '../config/database.php';
require_once '../models/InternalMessage.php';

class RealtimeNotificationsTest {
    private $db;
    private $internalMessageModel;

    public function __construct() {
        $database = Database::getInstance();
        $this->db = $database->getConnection();
        $this->internalMessageModel = new InternalMessage();
    }

    /**
     * Test g·ª≠i th√¥ng b√°o v√† ki·ªÉm tra SSE
     */
    public function testRealtimeNotifications() {
        echo "<h2>üß™ Test Realtime Notifications</h2>";

        // 1. T·∫°o th√¥ng b√°o test
        $this->createTestMessage();

        // 2. Ki·ªÉm tra SSE endpoint
        $this->testSSEEndpoint();

        // 3. Ki·ªÉm tra API endpoints
        $this->testAPIEndpoints();

        // 4. H∆∞·ªõng d·∫´n test th·ªß c√¥ng
        $this->showManualTestInstructions();
    }

    private function createTestMessage() {
        echo "<h3>1. T·∫°o th√¥ng b√°o test</h3>";

        try {
            // L·∫•y Super Admin ƒë·∫ßu ti√™n
            $stmt = $this->db->prepare("SELECT id FROM users WHERE role = 'super_admin' LIMIT 1");
            $stmt->execute();
            $superAdmin = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$superAdmin) {
                echo "<p style='color: red;'>‚ùå Kh√¥ng t√¨m th·∫•y Super Admin</p>";
                return;
            }

            // L·∫•y Admin ƒë·∫ßu ti√™n
            $stmt = $this->db->prepare("SELECT id FROM users WHERE role = 'manager' LIMIT 1");
            $stmt->execute();
            $admin = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$admin) {
                echo "<p style='color: red;'>‚ùå Kh√¥ng t√¨m th·∫•y Admin</p>";
                return;
            }

            // T·∫°o th√¥ng b√°o test
            $messageData = [
                'title' => 'Test Realtime Notification - ' . date('Y-m-d H:i:s'),
                'content' => 'ƒê√¢y l√† th√¥ng b√°o test ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng realtime. Th√¥ng b√°o n√†y s·∫Ω ƒë∆∞·ª£c g·ª≠i ngay l·∫≠p t·ª©c ƒë·∫øn Admin.',
                'message_type' => 'notification',
                'priority' => 'high',
                'sender_id' => $superAdmin['id'],
                'recipients' => [$admin['id']]
            ];

            $result = $this->internalMessageModel->createMessage($messageData);

            if ($result) {
                echo "<p style='color: green;'>‚úÖ T·∫°o th√¥ng b√°o test th√†nh c√¥ng</p>";
                echo "<p><strong>Ti√™u ƒë·ªÅ:</strong> {$messageData['title']}</p>";
                echo "<p><strong>N·ªôi dung:</strong> {$messageData['content']}</p>";
                echo "<p><strong>Ng∆∞·ªùi g·ª≠i:</strong> Super Admin (ID: {$superAdmin['id']})</p>";
                echo "<p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> Admin (ID: {$admin['id']})</p>";
            } else {
                echo "<p style='color: red;'>‚ùå L·ªói t·∫°o th√¥ng b√°o test</p>";
            }

        } catch (Exception $e) {
            echo "<p style='color: red;'>‚ùå L·ªói: " . $e->getMessage() . "</p>";
        }
    }

    private function testSSEEndpoint() {
        echo "<h3>2. Ki·ªÉm tra SSE Endpoint</h3>";

        $endpoints = [
            'Super Admin SSE' => '/superadmin/internal-messages/sse',
            'Admin SSE' => '/admin/internal-messages/sse'
        ];

        foreach ($endpoints as $name => $endpoint) {
            echo "<h4>{$name}</h4>";
            echo "<p><strong>URL:</strong> <code>{$endpoint}</code></p>";

            // Ki·ªÉm tra xem endpoint c√≥ t·ªìn t·∫°i kh√¥ng
            $fullUrl = SITE_URL . $endpoint;
            echo "<p><strong>Full URL:</strong> <code>{$fullUrl}</code></p>";

            echo "<p><strong>Tr·∫°ng th√°i:</strong> <span style='color: orange;'>‚ö†Ô∏è C·∫ßn test th·ªß c√¥ng</span></p>";
            echo "<p>SSE endpoint s·∫Ω tr·∫£ v·ªÅ Content-Type: text/event-stream</p>";
        }
    }

    private function testAPIEndpoints() {
        echo "<h3>3. Ki·ªÉm tra API Endpoints</h3>";

        $endpoints = [
            'Super Admin - Get Unread Count' => '/superadmin/internal-messages/get-unread-count',
            'Super Admin - Mark as Read' => '/superadmin/internal-messages/mark-as-read',
            'Admin - Get Unread Count' => '/admin/internal-messages/get-unread-count',
            'Admin - Mark as Read' => '/admin/internal-messages/mark-as-read'
        ];

        foreach ($endpoints as $name => $endpoint) {
            echo "<h4>{$name}</h4>";
            echo "<p><strong>URL:</strong> <code>{$endpoint}</code></p>";
            echo "<p><strong>Method:</strong> " . (strpos($endpoint, 'mark-as-read') !== false ? 'POST' : 'GET') . "</p>";

            if (strpos($endpoint, 'mark-as-read') !== false) {
                echo "<p><strong>Body:</strong> <code>message_id=1</code></p>";
            }

            echo "<p><strong>Response:</strong> JSON</p>";
        }
    }

    private function showManualTestInstructions() {
        echo "<h3>4. H∆∞·ªõng d·∫´n test th·ªß c√¥ng</h3>";

        echo "<div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;'>";
        echo "<h4>üìã C√°c b∆∞·ªõc test:</h4>";
        echo "<ol>";
        echo "<li><strong>M·ªü 2 tab tr√¨nh duy·ªát:</strong></li>";
        echo "<ul>";
        echo "<li>Tab 1: ƒêƒÉng nh·∫≠p Super Admin ‚Üí Internal Messages ‚Üí Send</li>";
        echo "<li>Tab 2: ƒêƒÉng nh·∫≠p Admin ‚Üí Internal Messages ‚Üí Received</li>";
        echo "</ul>";

        echo "<li><strong>Ki·ªÉm tra SSE connection:</strong></li>";
        echo "<ul>";
        echo "<li>M·ªü Developer Tools (F12) ‚Üí Console</li>";
        echo "<li>Ki·ªÉm tra log 'SSE Connected'</li>";
        echo "<li>N·∫øu c√≥ l·ªói, ki·ªÉm tra Network tab</li>";
        echo "</ul>";

        echo "<li><strong>Test g·ª≠i th√¥ng b√°o realtime:</strong></li>";
        echo "<ul>";
        echo "<li>Tab 1: G·ª≠i th√¥ng b√°o m·ªõi</li>";
        echo "<li>Tab 2: Ki·ªÉm tra popup th√¥ng b√°o xu·∫•t hi·ªán ngay l·∫≠p t·ª©c</li>";
        echo "<li>Ki·ªÉm tra badge s·ªë th√¥ng b√°o tƒÉng l√™n</li>";
        echo "</ul>";

        echo "<li><strong>Test √¢m thanh:</strong></li>";
        echo "<ul>";
        echo "<li>Ki·ªÉm tra c√≥ √¢m thanh th√¥ng b√°o kh√¥ng</li>";
        echo "<li>√Çm thanh s·∫Ω ph√°t khi c√≥ th√¥ng b√°o m·ªõi</li>";
        echo "</ul>";

        echo "<li><strong>Test ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc:</strong></li>";
        echo "<ul>";
        echo "<li>Click 'Xem' trong popup th√¥ng b√°o</li>";
        echo "<li>Ki·ªÉm tra badge s·ªë th√¥ng b√°o gi·∫£m</li>";
        echo "</ul>";
        echo "</ol>";
        echo "</div>";

        echo "<h4>üîß Troubleshooting:</h4>";
        echo "<ul>";
        echo "<li><strong>SSE kh√¥ng k·∫øt n·ªëi:</strong> Ki·ªÉm tra firewall, proxy, ho·∫∑c server config</li>";
        echo "<li><strong>Kh√¥ng c√≥ popup:</strong> Ki·ªÉm tra JavaScript console c√≥ l·ªói kh√¥ng</li>";
        echo "<li><strong>Badge kh√¥ng hi·ªÉn th·ªã:</strong> Ki·ªÉm tra CSS v√† DOM structure</li>";
        echo "<li><strong>√Çm thanh kh√¥ng ph√°t:</strong> Ki·ªÉm tra browser permissions</li>";
        echo "</ul>";
    }

    /**
     * Test performance c·ªßa SSE
     */
    public function testSSEPerformance() {
        echo "<h3>5. Test Performance</h3>";

        echo "<p><strong>SSE Connection:</strong></p>";
        echo "<ul>";
        echo "<li>Keep-alive m·ªói 30 gi√¢y</li>";
        echo "<li>Ki·ªÉm tra th√¥ng b√°o m·ªõi m·ªói 5 gi√¢y</li>";
        echo "<li>Auto reconnect khi m·∫•t k·∫øt n·ªëi</li>";
        echo "<li>T·ªëi ƒëa 5 l·∫ßn th·ª≠ k·∫øt n·ªëi l·∫°i</li>";
        echo "</ul>";

        echo "<p><strong>Memory Usage:</strong> SSE s·ª≠ d·ª•ng √≠t memory h∆°n WebSocket</p>";
        echo "<p><strong>Browser Support:</strong> H·ªó tr·ª£ t·ªët tr√™n t·∫•t c·∫£ browser hi·ªán ƒë·∫°i</p>";
    }
}

// Ch·∫°y test
$test = new RealtimeNotificationsTest();
$test->testRealtimeNotifications();
$test->testSSEPerformance();

echo "<hr>";
echo "<p><strong>‚úÖ Test ho√†n th√†nh!</strong></p>";
echo "<p>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ test th·ªß c√¥ng theo h∆∞·ªõng d·∫´n ·ªü tr√™n.</p>";
?>
